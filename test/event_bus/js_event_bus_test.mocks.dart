// Mocks generated by Mockito 5.4.5 from annotations
// in flutter_js_bridge/test/event_bus/js_event_bus_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter_js_bridge/src/js_bridge_controller.dart' as _i3;
import 'package:flutter_js_bridge/src/js_event.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:webview_flutter/webview_flutter.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWebViewController_0 extends _i1.SmartFake
    implements _i2.WebViewController {
  _FakeWebViewController_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [JSBridgeController].
///
/// See the documentation for Mockito's code generation for more information.
class MockJSBridgeController extends _i1.Mock
    implements _i3.JSBridgeController {
  MockJSBridgeController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WebViewController get webViewController =>
      (super.noSuchMethod(
            Invocation.getter(#webViewController),
            returnValue: _FakeWebViewController_0(
              this,
              Invocation.getter(#webViewController),
            ),
          )
          as _i2.WebViewController);

  @override
  String get javaScriptChannelName =>
      (super.noSuchMethod(
            Invocation.getter(#javaScriptChannelName),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.getter(#javaScriptChannelName),
            ),
          )
          as String);

  @override
  void handleIncomingMessage(_i2.JavaScriptMessage? message) =>
      super.noSuchMethod(
        Invocation.method(#handleIncomingMessage, [message]),
        returnValueForMissingStub: null,
      );

  @override
  void registerHandler(String? action, _i5.JSCallbackHandler? handler) =>
      super.noSuchMethod(
        Invocation.method(#registerHandler, [action, handler]),
        returnValueForMissingStub: null,
      );

  @override
  void unregisterHandler(String? action) => super.noSuchMethod(
    Invocation.method(#unregisterHandler, [action]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<dynamic> callJavaScript(String? action, {dynamic data}) =>
      (super.noSuchMethod(
            Invocation.method(#callJavaScript, [action], {#data: data}),
            returnValue: _i6.Future<dynamic>.value(),
          )
          as _i6.Future<dynamic>);

  @override
  void sendToJavaScript(String? action, {dynamic data}) => super.noSuchMethod(
    Invocation.method(#sendToJavaScript, [action], {#data: data}),
    returnValueForMissingStub: null,
  );

  @override
  String generateMessageId() =>
      (super.noSuchMethod(
            Invocation.method(#generateMessageId, []),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.method(#generateMessageId, []),
            ),
          )
          as String);
}
